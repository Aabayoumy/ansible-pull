---
- name: Set global variable sshd_config_file
  set_fact:
    sshd_config_file: /etc/ssh/sshd_config

- name: Ensure ssh config file is exist
  ansible.builtin.file:
    path: "{{ sshd_config_file }}"
    state: touch


- name: Secure SSH
  block:

  - name: Set ClientAliveInterval
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: '^ClientAliveInterval'
      line: 'ClientAliveInterval 60'
      state: present

  - name: Disable root login
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: "^PermitRootLogin"
      line: "PermitRootLogin no"
      backup: true

  - name: Enforce SSH key passphrases
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: "^#PermitEmptyPasswords"
      line: "PermitEmptyPasswords no"
      backup: true

  - name: Secure SSH key exchange algorithms
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: "^KexAlgorithms"
      line: "KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256@libssh.org,diffie-hellman-group18-sha512"
      backup: true

  - name: Secure SSH ciphers
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: "^Ciphers"
      line: "Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr"
      backup: true

  - name: Secure SSH MACs
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: "^MACs"
      line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com"
      backup: true
  - name: Limit SSH login attempts
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: "^MaxAuthTries"
      line: "MaxAuthTries 3"
      backup: true
      
  - name: Enable the most secure server auth algos and protocol version
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^Protocol 2'
      line: 'Protocol 2'
  - name: Disable root login
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: "^PermitRootLogin"
      line: "PermitRootLogin no"
      backup: true
      
  - name: Enable the most secure server host key algorithms
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^HostKey /etc/ssh/ssh_host_ed25519_key'
      line: 'HostKey /etc/ssh/ssh_host_ed25519_key'

  - name: Enable the most secure server host key algorithms
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^HostKey /etc/ssh/ssh_host_rsa_key'
      line: 'HostKey /etc/ssh/ssh_host_rsa_key'

  - name: Disable ECDSA and DSA host keys
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^HostKey /etc/ssh/ssh_host_ecdsa_key'
      state: absent

  - name: Disable ECDSA and DSA host keys
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^HostKey /etc/ssh/ssh_host_dsa_key'
      state: absent

  - name: And remove the files
    ansible.builtin.file:
      dest: /etc/ssh/ssh_host_ecdsa_key.pub
      state: absent

  - name: Remove ECDSA and DSA host keys
    ansible.builtin.file:
      dest: /etc/ssh/ssh_host_ecdsa_key
      state: absent

  - name: Remove ECDSA and DSA host key pub
    ansible.builtin.file:
      dest: /etc/ssh/ssh_host_dsa_key.pub
      state: absent

  - name: Remove ECDSA and DSA host key
    ansible.builtin.file:
      dest: /etc/ssh/ssh_host_dsa_key
      state: absent

  - name: Disable password authentication
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^#?AuthenticationMethods'
      line: 'AuthenticationMethods publickey'

  - name: Disable password authentication
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^#?PasswordAuthentication'
      line: 'PasswordAuthentication no'
      state: present

  - name: Disable challenge-response authentication
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^#?ChallengeResponseAuthentication'
      line: 'ChallengeResponseAuthentication no'

  - name: Enable public key authentication
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^#?PubkeyAuthentication'
      line: 'PubkeyAuthentication yes'
      
  - name: Log key fingerprint
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^LogLevel'
      line: 'LogLevel VERBOSE'

  - name: Log sftp level file access (read/write/etc.) that would not be easily logged otherwise.
    ansible.builtin.lineinfile:
      dest: "{{ sshd_config_file }}"
      regexp: '^Subsystem\s+sftp'
      line: 'Subsystem sftp  /usr/lib/openssh/sftp-server -f AUTHPRIV -l INFO'
      backup: true

  - name: Set LoginGraceTime to 60 seconds
    ansible.builtin.lineinfile:
      path: "{{ sshd_config_file }}"
      regexp: '^LoginGraceTime.*'
      line: 'LoginGraceTime 60'
      state: present
      backup: true

  - name: Set ownership and permissions of sshd_config
    ansible.builtin.file:
      path: "{{ sshd_config_file }}"
      owner: root
      group: root
      mode: '0600'

  notify:
    - Restart sshd
  become: true
  