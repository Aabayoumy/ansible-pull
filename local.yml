- hosts: localhost
  connection: local
  gather_facts: yes
  become: true
  pre_tasks:
    - name: Only run "update_cache=yes" if the last one is more than 3600 seconds ago
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_facts['os_family'] == "Debian"
    - name: Update all packages to their latest version
      ansible.builtin.apt:
        name: "*"
        state: latest
      when: ansible_facts['os_family'] == "Debian"
      
    - name: dnf conf
      ansible.builtin.lineinfile:
        path: /etc/dnf/dnf.conf
        line: "{{ item }}"
      loop:
        - max_parallel_downloads=20
        - fastestmirror=true
        - deltarpm=true
      run_once: true
      when: ansible_facts['os_family'] == "RedHat"
    - name: Upgrade all packages
      ansible.builtin.dnf:
        name: "*"
        state: latest
      when: ansible_facts['os_family'] == "RedHat"
    
    - name: Autoremove unneeded packages installed as dependencies
      ansible.builtin.dnf:
        autoremove: yes
      when: ansible_facts['os_family'] == "RedHat"
    - name: Detect WSL
      ansible.builtin.import_tasks: pre_tasks/detect_wsl.yml
      tags:
        - always
    - name: Detect wsl
      ansible.builtin.debug:
        var: ansible_host_environment_is_wsl
      tags:
        - always

    - name: Confirm Windows PowerShell Execution Policy
      ansible.builtin.import_tasks: pre_tasks/powershell_executionpolicy.yml
      when: ansible_host_environment_is_wsl
      tags:
        - always

    - name: Detect Host User
      ansible.builtin.import_tasks: pre_tasks/whoami_wsl.yml
      when: ansible_host_environment_is_wsl
      tags:
        - always

    - name: Detect Host User
      ansible.builtin.import_tasks: pre_tasks/whoami.yml
      tags:
        - always

    - name: Create users
      ansible.builtin.import_tasks: pre_tasks/users.yml
      tags:
        - always
      when: host_user == "root"
      
    - name: update
      ansible.builtin.import_tasks: pre_tasks/update.yml
      tags:
        - always
        
  tasks:

    - name: User
      ansible.builtin.debug:
        var: host_user
      tags:
        - always

    - name: Set roles
      ansible.builtin.set_fact:
        run_roles: "{{ ansible_run_tags != ['all'] and ansible_run_tags or default_roles | difference(exclude_roles | default([])) }}"
      tags:
        - always
      when: host_user != "root"

    - name: Set roles for root
      ansible.builtin.set_fact:
       run_roles: "{{ ansible_run_tags != ['all'] and ansible_run_tags or root_roles | difference(exclude_roles | default([])) }}"
      tags:
        - always
      when: host_user == "root"

    - name: Display roles
      ansible.builtin.debug:
        var: run_roles
      tags:
        - always

    - name: Run roles
      ansible.builtin.include_role:
        apply:
          tags:
            - "{{ roles_item }}"
        name: "{{ roles_item }}"
      loop_control:
        loop_var: roles_item
      with_items: "{{ run_roles }}"
      tags:
        - always